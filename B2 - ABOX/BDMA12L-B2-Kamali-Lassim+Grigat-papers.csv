abstract,citationCount,firstAuthor,influentialCitationCount,keywords,otherAuthors,pages,paperId,reviewers,title,venue,venueId,venueType,volume,year
"Graph Database Management Systems (GDBMSs) store data as graphs and allow the efficient querying of nodes and their relationships. Logic bugs are bugs that cause a GDBMS to return an incorrect result for a given query (e.g., by returning incorrect nodes or relationships). The impact of such bugs can be severe, as they often go unnoticed. The core insight of this paper is that Query Partitioning, a test oracle that has been proposed to test Relational Database Systems, is applicable to testing GDBMSs as well. The core idea of Query Partitioning is that, given a query, multiple queries are derived whose results can be combined to reconstruct the given query’s result. Any discrepancy in the result indicates a logic bug. We have implemented this approach as a practical tool named GDBMeter and evaluated GDBMeter on three popular GDBMSs and found a total of 40 unique, previously unknown bugs. We consider 14 of them to be logic bugs, the others being error or crash bugs. Overall, 27 of the bugs have been fixed, and 35 confirmed. We compared our approach to the state-of-the-art approach to testing GDBMS, which relies on differential testing; we found that it results in a high number of false alarms, while Query Partitioning reported actual logic bugs without any false alarms. Furthermore, despite the previous efforts in testing Neo4j and JanusGraph, we found 18 additional bugs. The developers appreciate our work and plan to integrate GDBMeter into their testing process. We expect that this simple, yet effective approach and the practical tool will be used to test other GDBMSs.",25,1663632797,2,"Management Systems, Database Management, Query Partitioning, Graph Database, Database Systems","2280834096, 1625425838, 38319925",,a2a514ed839dafdd0fb76d6c2615f25f35bf8087,"2131285720, 40915325, 2112638989, 2055223031, 2164445100",Testing Graph Database Engines via Query Partitioning,International Symposium on Software Testing and Analysis,289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0,conference,,2023
"Graph database engines stand out in the era of big data for their efficiency of modeling and processing linked data. To assure high quality of graph database engines, it is highly critical to conduct automatic test generation for graph database engines, e.g., random test generation, the most commonly adopted approach in practice. However, random test generation faces the challenge of generating complex inputs (i.e., property graphs and queries) for producing non-empty query results; generating such type of inputs is important especially for detecting wrong-result bugs. To address this challenge, in this paper, we propose GDsmith, the first approach for testing Cypher graph database engines. GDsmith ensures that each randomly generated query satisfies the semantic requirements. To increase the probability of producing complex queries that return non-empty results, GDsmith includes two new techniques: graph-guided generation of complex pattern combinations and data-guided generation of complex conditions. Our evaluation results demonstrate that GDsmith is effective and efficient for producing complex queries that return non-empty results for bug detection, and substantially outperforms the baselines. GDsmith successfully detects 28 bugs on the released versions of three highly popular open-source graph database engines and receives positive feedback from their developers.",17,2171106811,3,"database engines, Graph database, big data, linked data, database","49661434, 31131132, 2118207557, 144281339, 5779643, 2057038192",,6c755fc901d0b41a5d73c265f64a5aacf62e83b8,"74882299, 121865955, 2109875, 144544723, 2117925465",GDsmith: Detecting Bugs in Cypher Graph Database Engines,International Symposium on Software Testing and Analysis,289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0,conference,,2023
"
 Modern graph database query languages such as GQL, SQL/PGQ, and their academic predecessor G-Core promote paths to first-class citizens in the sense that their pattern matching facility can return
 paths
 , as opposed to only nodes and edges. This is challenging for database engines, since graphs can have a large number of paths between a given node pair, which can cause huge intermediate results in query evaluation.
 
 
 We introduce the concept of
 path multiset representations (PMRs)
 , which can represent multisets of paths exponentially succinctly and therefore bring significant advantages for representing intermediate results. We give a detailed theoretical analysis that shows that they are especially well-suited for representing results of regular path queries and extensions thereof involving counting, random sampling, and unions. Our experiments show that they drastically improve scalability for regular path query evaluation, with speedups of several orders of magnitude.
",20,144352362,1,"academic predecessor, predecessor G-Core, G-Core promote, first-class citizens, pattern matching","2879007, 2164445100, 2304958793, 1709642, 2434366",1790-1803,2c3eef2f17369912e330281d54b535675077e4ca,"2157843743, 7806657, 153158488, 9207924, 2054838160",Representing Paths in Graph Database Pattern Matching,Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,16,2023
"ABSTRACT In this systems paper, we present MillenniumDB: a novel graph database engine that is modular, persistent, and open source. MillenniumDB is based on a graph data model, which we call domain graphs, that provides a simple abstraction upon which a variety of popular graph models can be supported, thus providing a flexible data management engine for diverse types of knowledge graph. The engine itself is founded on a combination of tried and tested techniques from relational data management, state-of-the-art algorithms for worst-case-optimal joins, as well as graph-specific algorithms for evaluating path queries. In this paper, we present the main design principles underlying MillenniumDB, describing the abstract graph model and query semantics supported, the concrete data model and query syntax implemented, as well as the storage, indexing, query planning and query evaluation techniques used. We evaluate MillenniumDB over real-world data and queries from the Wikidata knowledge graph, where we find that it outperforms other popular persistent graph database engines (including both enterprise and open source alternatives) that support similar query features.",14,2434366,3,"graph, systems paper, data, query, graph database","2059572334, 2772109, 144658846, 1754091, 1403082590, 144007515, 143678972, 1706922, 143911374",560-610,61c931d50f3e32f70abf1bccddf2479212dd2fde,"1726596, 2973714, 1663632797",MillenniumDB: An Open-Source Graph Database System,Data Intelligence,f80a2e54-1332-48bf-9634-4b2f77fca809,journal,5,2023
"Graph database systems (GDBs) allow efficiently storing and retrieving graph data, and have become the critical component in many applications, e.g., knowledge graphs, social networks, and fraud detection. It is important to ensure that GDBs operate correctly. Logic bugs can occur and make GDBs return an incorrect result for a given query. These bugs are critical and can easily go unnoticed by developers when the graph and queries become complicated. Despite the importance of GDBs, logic bugs in GDBs have received less attention than those in relational database systems. In this paper, we present Grand, an approach for automatically finding logic bugs in GDBs that adopt Gremlin as their query language. The core idea of Grand is to construct semantically equivalent databases for multiple GDBs, and then compare the results of a Gremlin query on these databases. If the return results of a query on multiple GDBs are different, the likely cause is a logic bug in these GDBs. To effectively test GDBs, we propose a model-based query generation approach to generate valid Gremlin queries that can potentially return non-empty results, and a data mapping approach to unify the format of query results for different GDBs. We evaluate Grand on six widely-used GDBs, e.g., Neo4j and HugeGraph. In total, we have found 21 previously-unknown logic bugs in these GDBs. Among them, developers have confirmed 18 bugs, and fixed 7 bugs.",32,2158585032,3,"GDBs, Logic bugs, bugs, social networks, fraud detection","2964640, 134898163, 2093481779, 2131285720, 2118120527, 2152692124, 40231586, 144525882",,e67a2817089312746d69b38ce9abfdc4b1bc69c3,"2735649, 82495098, 50841357, 2140474907",Finding bugs in Gremlin-based graph database systems via Randomized differential testing,International Symposium on Software Testing and Analysis,289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0,conference,,2022
,14,2108844303,0,,"2145413970, 72117196, 2150609388, 2115219530, 2116502347, 2151811827",2545-2558,75a8faa6861b7fdd49b36615df1835f1c4bbcb65,"2735649, 115694632, 3425847, 134898163, 2108966388",G-Tran: A High Performance Distributed Graph Database with a Decentralized Architecture,Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,15,2022
,17,144615268,0,,2140474907,515-537,fe4c5074f021cd1c810892c1b6bc267b23aa6e5c,"3090789, 38319925, 2873542, 40915325, 66327914",Fraud detection in the distributed graph database,Cluster Computing,f1d0ef3d-4e90-41e9-b454-f589a933654f,journal,26,2022
"Most products at ByteDance, e.g., TikTok, Douyin, and Toutiao, naturally generate massive amounts of graph data. To efficiently store, query and update massive graph data is challenging for the broad range of products at ByteDance with various performance requirements. We categorize graph workloads at ByteDance into three types: online analytical, transaction, and serving processing, where each workload has its own characteristics. Existing graph databases have different performance bottlenecks in handling these workloads and none can efficiently handle the scale of graphs at ByteDance. We developed ByteGraph to process these graph workloads with high throughput, low latency and high scalability. There are several key designs in ByteGraph that make it efficient for processing our workloads, including edge-trees to store adjacency lists for high parallelism and low memory usage, adaptive optimizations on thread pools and indexes, and geographic replications to achieve fault tolerance and availability. ByteGraph has been in production use for several years and its performance has shown to be robust for processing a wide range of graph workloads at ByteDance.",22,2145413970,2,"naturally generate, graph data, Douyin, graph, graph workloads","2108844303, 2167037428, 1490915504, 2145763285, 2109512262, 123816348, 2088215217, 2344391699, 32058742, 2116124684, 2144671306, 2424392, 2182246691, 2112662828, 2184079980, 113398129, 2695617, 2321412875, 2112409349, 46255707, 2157513188, 2153604994, 2113918898, 50841357, 2116502347",3306-3318,d1ae4ab5047489c2b010c7ce72262982ad66ad60,"1906960, 1739380877, 2057038192, 2158490269, 2126581481",ByteGraph: A High-Performance Distributed Graph Database in ByteDance,Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,15,2022
"A graph database is a type of NoSQL database that uses graph structure for semantic queries with nodes, edges, and properties to represent and store data. It has been applied in many fields, such as education, health, business, and social network, with many famous applications such as Google, Facebook, and eBay. One of the main advantages of the graph database is its effective performance in data queries. This paper presents a comprehensive comparison of the performance based on the execution time of a NoSQL graph database named Neo4J with a popular relational database system, MySQL, which is used as the underlying technology in developing a software system. Query types are categorized into four groups: selection/ search, recursion, aggregation, and pattern matching. We examined representative questions for each group and executed them on Neo4j and MySQL using a real-life dataset named Career Village. The results show that Neo4j’s data query performance is better than MySQL in most results.",8,10313020,0,"graph database, database, semantic queries, graph structure, graph","2192611227, 23214019, 2065718",,5534c3b8bfe03ec0ee3ea3aafd0a4471b07f8b7d,"40231586, 2158490269, 153314895, 83974446",Query-based Performance Comparison of Graph Database and Relational Database,Symposium on Information and Communication Technology,8f515bf7-e3c7-4242-85e5-14de4c29e76c,conference,,2022
,25,70209653,1,,"2070468032, 7790877",1 - 20,7bb477077968d68aa7a6059d8d6d801fb28274da,"40231586, 2116718, 51417783",Credit Card Fraud Detection Technique by Applying Graph Database Model,The Arabian journal for science and engineering,9bc76c9a-64ac-4dd9-902e-80fccca1833f,journal,46,2021
"Background The COVID-19 epidemic is still spreading globally. Contact tracing is a vital strategy in epidemic emergency management; however, traditional contact tracing faces many limitations in practice. The application of digital technology provides an opportunity for local governments to trace the contacts of individuals with COVID-19 more comprehensively, efficiently, and precisely. Objective Our research aimed to provide new solutions to overcome the limitations of traditional contact tracing by introducing the organizational process, technical process, and main achievements of digital contact tracing in Hainan Province. Methods A graph database algorithm, which can efficiently process complex relational networks, was applied in Hainan Province; this algorithm relies on a governmental big data platform to analyze multisource COVID-19 epidemic data and build networks of relationships among high-risk infected individuals, the general population, vehicles, and public places to identify and trace contacts. We summarized the organizational and technical process of digital contact tracing in Hainan Province based on interviews and data analyses. Results An integrated emergency management command system and a multi-agency coordination mechanism were formed during the emergency management of the COVID-19 epidemic in Hainan Province. The collection, storage, analysis, and application of multisource epidemic data were realized based on the government’s big data platform using a centralized model. The graph database algorithm is compatible with this platform and can analyze multisource and heterogeneous big data related to the epidemic. These practices were used to quickly and accurately identify and trace 10,871 contacts among hundreds of thousands of epidemic data records; 378 closest contacts and a number of public places with high risk of infection were identified. A confirmed patient was found after quarantine measures were implemented by all contacts. Conclusions During the emergency management of the COVID-19 epidemic, Hainan Province used a graph database algorithm to trace contacts in a centralized model, which can identify infected individuals and high-risk public places more quickly and accurately. This practice can provide support to government agencies to implement precise, agile, and evidence-based emergency management measures and improve the responsiveness of the public health emergency response system. Strengthening data security, improving tracing accuracy, enabling intelligent data collection, and improving data-sharing mechanisms and technologies are directions for optimizing digital contact tracing.",22,2054289955,1,"Hainan Province, Contact tracing, Hainan, Province, data","101108644, 2054838160, 1492120545, 2115905112",N/A,1cff064f815111a71a98afda7aee1867ad617901,"2117925465, 51417783, 2126581481, 1483744000, 3326762",Digital Contact Tracing Based on a Graph Database Algorithm for Emergency Management During the COVID-19 Epidemic: Case Study,JMIR mHealth and uHealth,bb899a20-6789-46e4-9ed0-c7c284028fd9,journal,9,2021
"We revisit column-oriented storage and query processing techniques in the context of contemporary graph database management systems (GDBMSs). Similar to column-oriented RDBMSs, GDBMSs support read-heavy analytical workloads that however have fundamentally different data access patterns than traditional analytical workloads. We first derive a set of desiderata for optimizing storage and query processors of GDBMS based on their access patterns. We then present the design of columnar storage, compression, and query processing techniques based on these desiderata. In addition to showing direct integration of existing techniques from columnar RDBMSs, we also propose novel ones that are optimized for GDBMSs. These include a novel list-based query processor, which avoids expensive data copies of traditional block-based processors under many-to-many joins, a new data structure we call single-indexed edge property pages and an accompanying edge ID scheme, and a new application of Jacobson's bit vector index for compressing NULL values and empty lists. We integrated our techniques into the GraphflowDB in-memory GDBMS. Through extensive experiments, we demonstrate the scalability and query performance benefits of our techniques.",22,1505708061,1,"management systems, contemporary graph, graph database, database management, revisit column-oriented","26391899, 1783781",2491-2504,f4cfc7cbad257f1688772d59f694c16189dba811,"2109512262, 1398279766, 49673164",Columnar Storage and List-based Processing for Graph Database Management Systems,Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,14,2021
"Ontologies, and especially formal ones, have traditionally been investigated as a means to formalize an application domain so as to carry out automated reasoning on it. The union of the terminological part of an ontology and the corresponding assertional part is known as a Knowledge Graph. On the other hand, database technology has often focused on the optimal organization of data so as to boost efficiency in their storage, management and retrieval. Graph databases are a recent technology specifically focusing on element-driven data browsing rather than on batch processing. While the complementarity and connections between these technologies are patent and intuitive, little exists to bring them to full integration and cooperation. This paper aims at bridging this gap, by proposing an intermediate format that can be easily mapped onto the formal ontology on one hand, so as to allow complex reasoning, and onto the graph database on the other, so as to benefit from efficient data handling.",23,1725650,0,"application domain, Knowledge Graph, automated reasoning, Graph, Ontologies",,N/A,21042565ec941f4fa31ac5a0af85a1a84ff21f1b,"144589756, 7790877, 2145763285",Integration Strategy and Tool between Formal Ontology and Graph Database Technology,Electronics,ccd8e532-73c6-414f-bc91-271bbb2933e2,journal,N/A,2021
"Effective data interoperability and schedule analysis play a significant role in improving the management of prefabricated buildings. However, there is a lack of efficient strategies and comprehensive approaches for data interoperability and data-based automated schedule analysis. This paper intends to promote prefabricated buildings’ management by solving these two problems via developing an IFC-based framework consisting of three parts. Firstly, this framework proposed a mechanism to establish an IFC-based 4D construction management information model of prefabricated buildings. Furthermore, a non-relational database—graph database—is introduced to twin this model into a task-centered network to realize the interoperation of construction information among different participants. Finally, graph database-based strategies to update data, automatically analyze construction schedules and visualize the 4D construction management information model are described. The proposed framework is validated in a prefabricated engineering case. In this case, an IFC-based and graph database-based 4D construction management information model is established through IFC standard’s extension. The graph database-based analysis of the model automatically recognizes the engineering case’s critical path information, delay analysis information, and schedule network analysis information. It is illustrated that this framework can successfully establish a unified IFC-based information model of prefabricated buildings’ construction management to prompt effective data interoperability. In addition, the application of this IFC-based information model in graph database can automatically analyze the construction schedules to prevent possible delays in advance. In short, the significance of this paper is to innovatively propose an IFC-based and graph data-based information model to solve the difficulties of ineffective data interoperation and unautomated schedule analysis in prefabricated buildings’ construction management. This study can be the digital foundation of further IFC-based digital twin.",14,98831679,0,"information, information model, construction management, construction, model","2153317609, 2142659443, 30188257, 2108248686, 2117925465",N/A,9b3e8d202488dc29e601fc471a25a2af9002659e,"123816348, 144615268, 144554647, 2064971594",IFC-Based 4D Construction Management Information Model of Prefabricated Buildings and Its Application in Graph Database,Applied Sciences,136edf8d-0f88-4c2c-830f-461c6a9b842e,journal,N/A,2021
"As data grow both in size and in connectivity, the interest to use graph databases in the industry has been proliferating. However, there has been little research on graph database education. In response to the need to introduce college students to graph databases, this paper is the first to analyze students' errors in homework submissions of queries written in Cypher, the query language for Neo4j---the most prominent graph database. Based on 40,093 student submissions from homework assignments in an upper-level computer science database course at one university, this paper provides a quantitative analysis of students' learning when solving graph database problems. The data shows that students struggle the most to correctly use Cypher's WITH clause to define variable names before referencing in the WHERE clause and these errors persist over multiple homework problems requiring the same techniques, and we suggest a further improvement on the classification of syntactic errors.",8,153314895,0,"graph database, graph, database, data grow, database education","66327914, 2051972259, 2517099",,09f54c64b39f5f7e7570f9f4ce3e3af544401e14,"2344391699, 34629652, 145843448, 2116502347",A Quantitative Analysis of Student Solutions to Graph Database Problems,Annual Conference on Innovation and Technology in Computer Science Education,e82485bc-2195-4cf5-9f9a-012501918b2f,conference,,2021
,15,2115256817,1,,"150358651, 19262604, 2873542",,a604aa1f2a2ca1a6a0b09013e71b83d36cc0f358,"2741023, 1709661, 1739380877, 1781993",An Empirical Study on Recent Graph Database Systems,"Knowledge Science, Engineering and Management",3e22d1e0-9b11-40a4-ac7c-0ebe5825316e,conference,,2020
"The work is review in nature and focuses on basic concepts and example on Graph Database with a special focus on list of standard computerized tools available for handling the queries using graph database structure. The implementation benefits of each tool and a comparative analysis on various functionalities has been presented in this work. This work also elaborates on popular Graph Databases tool that includes Allegro Graph, ArangoDB, OrientDB, Infinite Graph ,Neo4j, Titan, FlockDB, Bitsy, StarDog, MongoDB and investigate their acceptance for solving day to day problems.",14,152781515,1,"Graph Database, database structure, basic concepts, special focus, standard computerized","46501582, 105003008, 152125305",,33e332837e91c1048c3ed165cd16bf7607c3bf06,"1483744000, 3240937, 2204964, 113272803, 9207924",Issues and Concepts of Graph Database and a Comparative Analysis on list of Graph Database tools,International Conference on Computational Collective Intelligence,66c268f7-ba60-443f-919d-e2c297910401,conference,,2020
"Although graph databases have extensively found applications in the relationship-centered era, a time-version support is seldom provided. While current storage systems capture the most recently updated snapshot of the underlying graph, most real world graphs embed a dynamic behavior translating the fact that vertices or edges can join or leave the graph at any time instant. Regarding that, a graph database should faithfully maintain the state of every graph's element permitting the analysis and prediction of the underlying system's performance. Since physical deletions are forbidden in such a scenario, the outgrowing size of data is a crippling restriction steering the interest in this area towards the optimization of the persistent storage. However, capturing and storing the state of the graph as full snapshots adds a storage overhead traded by faster query responses. Accordingly, the choice of an appropriate storage engine should be adapted with the threshold of accepted query latencies and the available storage resources. This paper will recognize the anterior academic work in the era of temporal graph databases while highlighting the existing tradeoff between storage and computation time costs. The implementation of GDBAlive, a temporal graph database using two state-of-the-art techniques Copy+Log and Log, is provided relying on a robust column oriented data store. In order to optimize the responsiveness of temporal queries in terms of computation times, we will introduce two fetching strategies ""AsyncFS"" and ""Forced Fetch"" and prove their efficiency on a real dataset.",16,2148303656,0,"extensively found, found applications, time-version support, graph, graph databases","66913593, 3010622",N/A,0601e9e434b30320c316c76228b97c093fa98ad6,"2117925465, 2140474907, 2157513188, 7806657",GDBAlive: A Temporal Graph Database Built on Top of a Columnar Data Store,Journal of Advances in Information Technology,f4784c7b-6592-49eb-a116-7290e0398868,journal,N/A,2020
"The typhoon knowledge graph can correlate various kinds of information in the typhoon data, conduct overall and related analysis, and finally provide effective assistance for typhoon prevention and post-disaster protection. The data of typhoon landing in China from 2000 to 2015 were selected to build a typhoon knowledge graph based on Neo4j graph database platform. The typhoon knowledge graph can be used to understand the occurrence of historical typhoons and obtain the distribution of typhoon data in time and space.",13,2158490269,0,"knowledge graph, typhoon knowledge, related analysis, post-disaster protection, finally provide","2118798587, 2152209915, 1877327478, 145104321, 145843448, 2157681212, 2157843743, 47149500, 2108691840",,72afe82af4c2ca100c36eb35292e85d806527f0a,"26435742, 3032058, 2310211, 82495098, 1686294",Construction of typhoon disaster knowledge graph based on graph database Neo4j,Chinese Control and Decision Conference,2cbf9479-e1fa-4c75-81f6-7103e18156ca,conference,,2020
,162,2772109,11,,,,91d6e8ba5dd90b02fe3bd870b19da13a6167af53,"151167094, 3515169, 50841357, 152781515, 2123810691",The Property Graph Database Model,Alberto Mendelzon Workshop on Foundations of Data Management,66257d67-2035-4ff6-b62a-4099db02fcde,conference,,2018
"In modern and interconnected world, information is accumulatively stored digitally, making the process of exchanging, gathering and querying the information much easier. Continuously, it has introduced new challenges about how to ensure its consistency and reliability due to the sheer volume of data. A blockchain-based information system can provide an incorruptible record of history, enabling better auditing and data management practices. The paper describes how to combine an Exonum blockchain and a Neo4j graph database into a system that can provide a verifiable audit trail of data integrity and its modifications for information stored in a graph database.",12,2069559207,1,"interconnected world, stored digitally, accumulatively stored, information, data","1903751380, 40915325, 1904203865, 1904199594, 1500655986",,6fb020754f6de564c3a0a07bb656c0a90be1f87d,"3256994, 70209653, 2145413970, 2142659443",Incorruptible Auditing: Blockchain-Powered Graph Database Management,International Conference on Blockchain,f1ab8d75-7f15-4bb4-ad88-e834ec6ed604,conference,,2020
"In the last decades, the use of information management systems in the building data processing led to radical changes to the methods of data production, documentation and archiving. In particular, the possibilities, given by these information systems, to visualize the 3D model and to formulate queries have placed the question of the information sharing in digital format. The integration of information systems represents an efficient solution for defining smart, sustainable and resilient projects, such as conservation and restoration processes, giving the possibilities to combine heterogeneous data. GIS provides a robust data storage system, a definition of topological and semantic relationships and spatial queries. 3D GIS makes possible the creation of three-dimensional model in a geospatial context. To promote the interoperability of GIS data, the present research aims first to analyse methods of conversion in CityGML and IndoorGML model, defining an ontological domain. This has led to the creation of a new enriched model, based on connections among the different elements of the urban model in GIS environment, and to the possibility to formulate queries based on these relations. The second step consists in collecting all data translated into a specific format that fill a graph database in a semantic web environment, while maintaining those relationships. The semantic web technology represents an efficient tool of interoperability that leaves open the possibility to import BIM data in the same graph database and to join both GIS and BIM models. The outcome will offer substantial benefits during the entire project life cycle. This methodology can also be applied to cultural heritage where the information management plays a key role.",19,2116718,0,"information systems, information, GIS, data, information management","51386512, 2126581481, 2005442184, 2126602785, 2123810691",53 - 66,ee6f23590783adec7cf6b2030c6a46f3117a708e,"30188257, 101108644, 2057038192, 2150609388, 1906960",A semantic graph database for the interoperability of 3D GIS data,Applied Geomatics,41c3b19b-0bac-418a-89dc-2fa894c12fef,journal,14,2020
"Over decades, relational database management systems (RDBMSs) have been the first choice to manage data. Recently, due to the variety properties of big data, graph database management systems (GDBMSs) have emerged as an important complement to RDBMSs. As pointed out in the existing literature, both RDBMSs and GDBMSs are capable of managing graph data and relational data; however, the boundaries of them still remain unclear. For this reason, in this paper, we first extend a unified benchmark for RDBMSs and GDBMSs over the same datasets using the same query workload under the same metrics. We then conduct extensive experiments to evaluate them and make the following findings: (1) RDBMSs outperform GDMBSs by a substantial margin under the workloads which mainly consist of group by, sort, and aggregation operations, and their combinations; (2) GDMBSs show their superiority under the workloads that mainly consist of multi-table join, pattern match, path identification, and their combinations.",37,3425847,5,"management systems, database management, manage data, RDBMSs, data","151167094, 2116679709, 51255623, 144589756",309 - 322,b067177b1e17287185eb3b82ccc3d7c646b3ec40,"2123810691, 9207924, 34629652, 2893252, 144521155",Which Category Is Better: Benchmarking Relational and Graph Database Management Systems,Data Science and Engineering,7e0547d5-ec21-470f-bdc9-b7615fc83a29,journal,4,2019
"In this paper, we propose GraphSE\textsuperscript2, an encrypted graph database for online social network services to address massive data breaches. GraphSE\textsuperscript2 ~preserves the functionality of social search, a key enabler for quality social network services, where social search queries are conducted on a large-scale social graph and meanwhile perform set and computational operations on user-generated contents. To enable efficient privacy-preserving social search, GraphSE\textsuperscript2 ~provides an encrypted structural data model to facilitate parallel and encrypted graph data access. It is also designed to decompose complex social search queries into atomic operations and realise them via interchangeable protocols in a fast and scalable manner. We build GraphSE\textsuperscript2 ~with various queries supported in the Facebook graph search engine and implement a full-fledged prototype. Extensive evaluations on Azure Cloud demonstrate that GraphSE\textsuperscript2 ~is practical for querying a social graph with a million of users.",35,3372924,2,"network services, social search, address massive, social, social network","3032058, 2044382, 1416519437, 46398863, 2729382",,7904b3446775ed8c79f4f94001a16b706989c462,"113398129, 1783781, 1906960, 1754091",GraphSE²: An Encrypted Graph Database for Privacy-Preserving Social Search,ACM Asia Conference on Computer and Communications Security,87fc9c3c-cc7f-42aa-ba71-2700729a6788,conference,,2019
"RedisGraph is a Redis module developed by Redis Labs to add graph database functionality to the Redis database. RedisGraph represents connected data as adjacency matrices. By representing the data as sparse matrices and employing the power of GraphBLAS (a highly optimized library for sparse matrix operations), RedisGraph delivers a fast and efficient way to store, manage and process graphs. Initial benchmarks indicate that RedisGraph is significantly faster than comparable graph databases.",28,115694632,3,"Redis Labs, Redis module, Redis, module developed, Redis database","2069668457, 74882299, 3257323, 113272803, 114367405, 2310211",,cde39ce861e4c7514ee07fd91b6b8aac50cbf01b,"2117925465, 2051972259, 51471694, 2059572334",RedisGraph GraphBLAS Enabled Graph Database,"IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum",7ddefda0-174f-499a-9dce-855879dd01b7,conference,,2019
"
 Despite the increasing interest in graph databases their requirements and specifications are not yet fully understood by everyone, leading to a great deal of variation in the supported functionalities and the achieved performances. In this work, we provide a comprehensive study of the existing graph database systems. We introduce a novel microbenchmarking framework that provides insights on their performance that go beyond what macro-benchmarks can offer. The framework includes the largest set of queries and operators so far considered. The graph database systems are evaluated on synthetic and real data, from different domains, and at scales much larger than any previous work. The framework is materialized as an open-source suite and is easily extended to new datasets, systems, and queries
 1
 .
",53,2574504,4,"increasing interest, fully understood, great deal, supported functionalities, graph database","3415440, 2163752",390-403,f295157f37cfb43cd8d8d2690ea124edc5ea59c2,"2053320598, 89129886, 47149500, 82495098",Beyond Macrobenchmarks: Microbenchmark-based Graph Database Evaluation,Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,12,2018
"The integration of oilfield multidisciplinary ontology is increasingly important for the growth of the Semantic Web. However, current methods encounter performance bottlenecks either in storing data and searching for information when processing large amounts of data. To overcome these challenges, we propose a domain-ontology process based on the Neo4j graph database. In this paper, we focus on data storage and information retrieval of oilfield ontology. We have designed mapping rules from ontology files to regulate the Neo4j database, which can greatly reduce the required storage space. A two-tier index architecture, including object and triad indexing, is used to keep loading times low and match with different patterns for accurate retrieval. Therefore, we propose a retrieval method based on this architecture. Based on our evaluation, the retrieval method can save 13.04% of the storage space and improve retrieval efficiency by more than 30 times compared with the methods of relational databases.",44,51417783,1,"Semantic Web, increasingly important, Web, Semantic, oilfield multidisciplinary","2115736466, 2510306, 2108756985, 145510499, 51917504",N/A,4cd033a56b19f87f6adfefeef5fcc990306ecf40,"35207399, 2153317609, 2171106811, 143911374",Neo4j graph database realizes efficient storage performance of oilfield ontology,PLoS ONE,0aed7a40-85f3-4c66-9e1b-c1556c57001b,journal,13,2018
,14,2094667365,1,,"2840539, 1388632905",,834cdfca7cc041a6fa0db3da5493c6754bea845b,"2510306, 150358651, 2144151933",A Graph Database-Based Approach to Analyze Network Log Files,International Conference on Network and System Security,71826259-dbc2-44dc-9ffa-abf8abd1514e,conference,,2019
"BackgroundSeveral online databases provide a large amount of biomedical data of different biological entities. These resources are typically stored in systems implementing their own data model, user interface and query language. On the other hand, in many bioinformatics scenarios there is often the need to use more than one resource. The availability of a single bioinformatics platform that integrates many biological resources and services is, for those reasons a fundamental issue.DescriptionHere, we present BioGraph, a web application that allows to query, visualize and analyze biological data belonging to several online available sources. BioGraph is built upon our previously developed graph database called BioGraphDB, that integrates and stores heterogeneous biological resources and make them available by means of a common structure and a unique query language. BioGraph implements state-of-the-art technologies and provides pre-compiled bioinformatics scenarios, as well as the possibility to perform custom queries and obtaining an interactive and dynamic visualization of results.ConclusionWe present a case study about functional analysis of microRNA in breast cancer in order to demonstrate the functionalities of the system. BioGraph is freely available at http://biograph.pa.icar.cnr.it. Source files are available on GitHub at https://github.com/IcarPA-TBlab/BioGraph",29,2053475163,1,"large amount, biomedical data, BackgroundSeveral online, biological entities, query language","1726596, 48270780, 145345939, 1706102",N/A,1b0aa15937fdf59103a5213bccf09cff83d0ee3e,"2424392, 144300761, 152781515",BioGraph: a web application and a graph database for querying and analyzing bioinformatics resources,BMC Systems Biology,7959fdab-81a2-4da4-8f2a-bd5855de5c6e,journal,12,2018
"Knowledge bases often utilize graphs as logical model. RDF-based knowledge bases (KB) are prime examples, as RDF (Resource Description Framework) does use graph as logical model. Graph databases are an emerging breed of NoSQL-type databases, offering graph as the logical model. Although there are specialized databases, the so-called triple stores, for storing RDF data, graph databases can also be promising candidates for storing knowledge. In this paper, we benchmark different graph database implementations loaded with Wikidata, a real-life, large-scale knowledge base. Graph databases come in all shapes and sizes, offer different APIs and graph models. Hence we used a measurement system, that can abstract away the API differences. For the modeling aspect, we made measurements with different graph encodings previously suggested in the literature, in order to observe the impact of the encoding aspect on the overall performance. 
 ",9,2058456649,0,"logical model, Resource Description, Description Framework, graph, Knowledge bases","2057440722, 144521155",43-60,c2528e88d5554e9df9f9d482ad46cb5331c4d794,"2152692124, 2164445100, 145104321",Benchmarking Graph Database Backends - What Works Well with Wikidata?,Acta Cybernetica,396366a4-a1ba-422b-a9ff-1471ee08eab8,journal,24,2019
"With the rapid development of the Internet, network security situation awareness has attracted tremendous attention. In large-scale complex networks, network security situation awareness data presents the characteristics of large-scale, multi-source, and heterogeneous. Recently, much research work have been done on network security situation awareness. However, most of the existing methods store different types of data in different ways, which makes data query and analysis inefficient. To solve this problem, we propose a graph database-based hierarchical multi-domain network security situation awareness data storage method. In our scheme, we build a hierarchical multi-domain network security situation awareness model to divide the network into different domains, which can collect and dispose the awareness data more efficiently. Meanwhile, to unify our storage mode, we also define network security situation awareness data storage rules and methods based on graph database. Finally, extensive experiments on real datasets show that our proposed method is efficient compared to state-of-the-art storage models.",20,2599800,0,"security situation, situation awareness, network security, security, situation","2152802371, 2087912383, 1739380877, 2153953921",N/A,6422f4b9e3bedf585170bffc7105ffe2061e87ae,"145104321, 1490915504, 1719119, 144589756, 50841357",Graph database-based network security situation awareness data storage method,EURASIP Journal on Wireless Communications and Networking,3215af4b-a40f-474d-bc19-27c154ff31a3,journal,2018,2018
"Understanding complex relationships among heterogeneous biological data is one of the fundamental goals in biology. In most cases, diverse biological data are stored in relational databases, such as MySQL and Oracle, which store data in multiple tables and then infer relationships by multiple-join statements. Recently, a new type of database, called the graph-based database, was developed to natively represent various kinds of complex relationships, and it is widely used among computer science communities and IT industries. Here, we demonstrate the feasibility of using a graph-based database for complex biological relationships by comparing the performance between MySQL and Neo4j, one of the most widely used graph databases. We collected various biological data (protein-protein interaction, drug-target, gene-disease, etc.) from several existing sources, removed duplicate and redundant data, and finally constructed a graph database containing 114,550 nodes and 82,674,321 relationships. When we tested the query execution performance of MySQL versus Neo4j, we found that Neo4j outperformed MySQL in all cases. While Neo4j exhibited a very fast response for various queries, MySQL exhibited latent or unfinished responses for complex queries with multiple-join statements. These results show that using graph-based databases, such as Neo4j, is an efficient way to store complex biological relationships. Moreover, querying a graph database in diverse ways has the potential to reveal novel relationships among heterogeneous biological data.",81,3515169,1,"relationships, biological data, fundamental goals, biological, data","2248549493, 2249671765",19 - 27,dcbaf58b16ac7ef947879ea37c021466357b291a,"5779643, 2053320598, 2116502347, 2142659443",Use of Graph Database for the Integration of Heterogeneous Biological Data,Genomics & Informatics,1de6e987-7434-4277-b939-ccb29843e936,journal,15,2017
,16,2089508093,1,,9207924,,c84aa52bee5116f80c7740503edff4b08f733c3b,"2158585032, 2065718, 2153317609, 1719119, 2893252",Migration of data from relational database to graph database,International Conference on Information and Software Technologies,d6dd0471-263c-45b1-8c75-ca4c683398e2,conference,,2018
"Abstract. Over the recent years, the usage of semantic web technologies and Resources Description Framework (RDF) data models have been notably increased in many fields. Multiple systems are using RDF data to describe information resources and semantic associations. RDF data plays a very important role in advanced information retrieval, and graphs are efficient ways to visualize and represent real world data by providing solutions to many real-time scenarios that can be simulated and implemented using graph databases, and efficiently query graphs with multiple attributes representing different domains of knowledge. Given that graph databases are schema less with efficient storage for semi-structured data, they can provide fast and deep traversals instead of slow RDBMS SQL based joins allowing Atomicity, Consistency, Isolation and durability (ACID) transactions with rollback support, and by utilizing mathematics of graph they can enormous potential for fast data extraction and storage of information in the form of nodes and relationships. In this paper, we are presenting an architectural design with complete implementation of BIM-GIS integrated RDF graph database. The proposed integration approach is composed of four main phases: ontological BIM and GIS model’s construction, mapping and semantic integration using interoperable data formats, then an import into a graph database with querying and filtering capabilities. The workflows and transformations of IFC and CityGML schemas into object graph databases model are developed and applied to an intelligent urban mobility web application on a game engine platform validate the integration methodology.
",40,143758771,1,"RDF data, Description Framework, graph databases, RDF, data","39894237, 3240937, 1483744000, 89129886",N/A,dad8965c5a4c0a0ea1eb3837c6a9c3b42597c2ce,"1398279766, 1719119, 2088215217, 121865955",A SEMANTIC GRAPH DATABASE FOR BIM-GIS INTEGRATED INFORMATION MODEL FOR AN INTELLIGENT URBAN MOBILITY WEB APPLICATION,"ISPRS Annals of the Photogrammetry, Remote Sensing and Spatial Information Sciences",c18ca9ea-c394-46d2-b458-30dcf166dabb,journal,N/A,2018
"The hit validation stage of a fragment-based drug discovery campaign involves probing the SAR around one or more fragment hits. This often requires a search for similar compounds in a corporate collection or from commercial suppliers. The Fragment Network is a graph database that allows a user to efficiently search chemical space around a compound of interest. The result set is chemically intuitive, naturally grouped by substitution pattern and meaningfully sorted according to the number of observations of each transformation in medicinal chemistry databases. This paper describes the algorithms used to construct and search the Fragment Network and provides examples of how it may be used in a drug discovery context.",32,145366422,0,"hit validation, validation stage, campaign involves, involves probing, Fragment Network","32682297, 2462060","
          6440-6450
        ",ce3285bf1853f00c00535325851df5c33a0fc5d6,"40208399, 3515169, 34629652, 2054289955",The Fragment Network: A Chemistry Recommendation Engine Built Using a Graph Database.,Journal of Medicinal Chemistry,4cce60a8-2106-4240-bece-fb6488df6bd1,journal,60 14,2017
,30,30492227,0,,2893252,2560-2569,e5a1cfcd07dcfd8b1feec9c635dadc858cde8166,"2157681212, 24812041, 2142659443",A Common Information Model Oriented Graph Database Framework for Power Systems,IEEE Transactions on Power Systems,dbbda9ef-0504-4875-b893-5c964f6b8f0e,journal,32,2017
,21,46255467,1,,"49673164, 2112638989, 34701398",,746a81aa26d3ebfb81acfd6af958d6a21603cd21,"2157681212, 2109512262, 2510306, 1778015, 46398863",Design and Implementation of Movie Recommender System Based on Graph Database,Web Information System and Application Conference,272e9ea4-5f3f-4a33-ba63-96d72e445a96,conference,,2017
"We introduce a new method for storing, modeling, and analyzing power grid data. First, we present an architecture for building the network model for a power grid using the open source graph database Neo4j. Second, we design singleand multi-threading systems for initial energization analysis of the power grid network. We design the shortest path search function and conditional search function based on Neo4j. Finally, we compare the functionality and efficiency of our graph database with a traditional relational database in system initial energization analysis and the shortest path function problems on small to large data sets. The results demonstrate the efficiency and effectiveness of topology modeling and analysis using graph database for a power grid network.",20,2204964,0,"power grid, analyzing power, grid network, power, grid","3256994, 121865955, 2145308743, 2064971594, 143627522",1355-1363,2396dbcfe1f7f9dafc6696c3c06b16fd3029f7a0,"2741023, 1709661, 1725650, 2893252",Topology Modeling and Analysis of a Power Grid Network Using a Graph Database,International Journal of Computational Intelligence Systems,bc01813d-0622-430d-a5f1-416b7332b85e,journal,10,2017
"Graph analytics have been gaining tractions rapidly in the past few years. It has a wide array of application areas in the industry, ranging from e-commerce, social network and recommendation systems to fraud detection and virtually any problem that requires insights into data connections, not just data itself. In this paper, we present GeaBase, a new distributed graph database that provides the capability to store and analyze graph-structured data in real-time at massive scale. We describe the details of the system and the implementation, including a novel update architecture, called Update Center (UC), and a new language that is suitable for both graph traversal and analytics. We also compare the performance of GeaBase to a widely used open-source graph database Titan. Experiments show that GeaBase is up to 182x faster than Titan in our testing scenarios. We also achieves 22x higher throughput on social network workloads in the comparison.",16,2677700,2,"gaining tractions, tractions rapidly, Graph, graph database, Update Center","7806657, 3358986, 1943322867, 2144151933, 2108966388, 2114147314, 24812041, 2218569240",,fb8e253b8b0358a7b95ddc9ac4c74f93513a9c53,"3240937, 2108248686, 2148303656, 51417783",GeaBase: A High-Performance Distributed Graph Database for Industry-Scale Applications,International Conference on Advanced Cloud and Big Data,313e0052-5427-47c4-8468-527a82399583,conference,,2017
,23,2973714,5,,1781993,,0a41891974da95ec4c17c54b8a17773f7ade858e,"1483744000, 2109512262, 82495098",Time Traveling in Graphs using a Graph Database,EDBT/ICDT Workshops,a2802f40-c210-444a-92bf-62245b599bb1,conference,,2016
,15,121066428,0,,2803317,,704011527f183b561ea6a75b21e4cefe5aa77fca,"2321412875, 2126581481, 51917504, 2735649, 35207399",Book recommendation using Neo4j graph database in BibTeX book metadata,International Conference on Science in Information Technology,ef1e8736-ed1b-48f1-bf5f-477f261a4e7b,conference,,2017
"
 We propose a large, scalable engineering knowledge graph, comprising sets of real-world engineering “facts” as < entity, relationship, entity > triples that are found in the patent database. We apply a set of rules based on the syntactic and lexical properties of claims in a patent document to extract facts. We aggregate these facts within each patent document and integrate the aggregated sets of facts across the patent database to obtain an engineering knowledge graph. Such a knowledge graph is expected to support inference, reasoning, and recalling in various engineering tasks. The knowledge graph has a greater size and coverage in comparison with the previously used knowledge graphs and semantic networks in the engineering literature.",62,51471694,2,"knowledge graph, entity, comprising sets, patent database, knowledge","1906960, 2053320598, 145990580",N/A,448959eff044f02040ded5afd483b7c4e811b0ac,"1903751380, 2116124684, 30188257, 2109875",Engineering Knowledge Graph from Patent Database,Journal of Computing and Information Science in Engineering,d029f971-f74c-41ca-8373-1b713414c797,journal,22,2021
,11,29908197,1,,"3410738, 1624701041, 2055223031, 14700512, 48573031",N/A,3dd7f7118ee174265889d00d100cfe2a02871be8,"2873542, 19262604, 48270780",Pheno4J: a gene to phenotype graph database,bioRxiv,027ffd21-ebb0-4af8-baf5-911124292fd0,journal,N/A,2017
,9,2059684397,1,,"1768034, 2061622257, 2540495, 143909963, 1778015",,4875aa46599dc2d7e8292fc563347cf78fa12c8d,"26391899, 145366422, 2599800, 1903751380",ChronoGraph: A Versioned TinkerPop Graph Database,International Conference on Data Technologies and Applications,dea8d7a8-c89e-4de9-bde3-0787594a055f,conference,,2017
"Graph databases have become a common infrastructure component. Yet existing systems either operate on offline snapshots, provide weak consistency guarantees, or use expensive concurrency control techniques that limit performance. 
 
In this paper, we introduce a new distributed graph database, called Weaver, which enables efficient, transactional graph analyses as well as strictly serializable ACID transactions on dynamic graphs. The key insight that allows Weaver to combine strict serializability with horizontal scalability and high performance is a novel request ordering mechanism called refinable timestamps. This technique couples coarse-grained vector timestamps with a fine-grained timeline oracle to pay the overhead of strong consistency only when needed. Experiments show that Weaver enables a Bitcoin blockchain explorer that is 8x faster than Blockchain.info, and achieves 10.9x higher throughput than the Titan graph database on social network workloads and 4x lower latency than GraphLab on offline graph traversal workloads.",53,2056568916,3,"infrastructure component, common infrastructure, Graph, Weaver, graph database","34629652, 2109875, 3326762",852-863,da942e549ca2e94cab6b3e4f59483496974683e2,"1768034, 2677700, 40231586","Weaver: A High-Performance, Transactional Graph Database Based on Refinable Timestamps",Proceedings of the VLDB Endowment,fcbcaf18-8ab1-43e1-a973-604bbc7e344e,journal,9,2015
,38,153158488,1,,"144554647, 1800925, 144019071",2507-2521,b940711660b76d8d2dd1306dc68daf9c07b862df,"1903751380, 2114796246, 49673164",Subgraph Matching with Set Similarity in a Large Graph Database,IEEE Transactions on Knowledge and Data Engineering,c6840156-ee10-4d78-8832-7f8909811576,journal,27,2015
,73,2463711,8,,"40208399, 2334971, 2707311, 35207399, 3164984, 144422954",479-514,4aad76cf012f306e4304c605bc24ccbcadbbf7ee,"2108966388, 153314895, 2157681212, 48270780, 26435742",The G* graph database: efficiently managing large distributed dynamic graphs,Distributed and parallel databases,ceac6326-95ad-4e90-a522-b7ab052ea5a4,journal,33,2015
,21,1398279766,3,,"1788879, 1689847",,cb18506c514ffa692afff226e74be845dcbc8ec3,"82495098, 2059572334, 2144151933, 1483744000",A Graph Database Repository and Performance Evaluation Metrics for Graph Edit Distance,Workshop on Graph Based Representations in Pattern Recognition,4fc0603b-2ba2-4512-94fa-ab87d02cb52a,conference,,2015
,15,1741623,0,,"145433223, 2673479",,48f139a93d24a2e42e20206dfa59563502fbcc7e,"2054838160, 2381325, 98831679, 26391899",Expression and efficient processing of fuzzy queries in a graph database context,IEEE International Conference on Fuzzy Systems,ba675c4e-f2dc-454e-9e38-d195732ed2b6,conference,,2015
,24,2741023,0,,2231831,,34340d947f0ca424cdad9ca7ca689f6f1d10ca2c,"2116718, 2248549493, 2158490269",Graph database benchmarking on cloud environments with XGDBench,International Conference on Automated Software Engineering,1c2ab05c-7d69-465e-929d-0920857aedce,conference,,2014
"Database industry is recently facing a major challenge in gaining scalability and handling multiple databases in one application. Relational database is clearly a well known standard for storing, managing and querying information. It is used in variety of contexts including analytical querying and business intelligence. However, due to enormous growth in distributed databases and massive use of social networks, new requirements have emerged and graph-structured data is becoming more and more important. Graph database can store graph data more naturally. Relational databases and graph databases both have strengths and weaknesses depending on the characteristics of data and the types of queries to be evaluated. However benefits can be taken from mix of both by moderating some of the constraints. Thus propose a design of hybrid model such that the two models are integrated in one system to eliminate the limitations of individual systems. The hybrid system unifies the strengths of relational databases and graph databases by analyzing their strengths and weaknesses. This paper attempts to provide an overview of past investigation on the hybrid database model.",24,82495098,0,"recently facing, major challenge, gaining scalability, handling multiple, databases","83974446, 144544723",,3d0472c20b77d2b2cd9ae065fe3fb1715ba06d48,"2115256817, 46501582, 24812041, 2873542, 3164984",A Hybrid Database Approach Using Graph and Relational Database,Rice,67734a9d-6cfd-4030-8586-c60ab6936188,conference,,2018
"The plethora of graphs and relational data give rise to many interesting graph-relational queries in various domains, e.g., finding related proteins retrieved by a relational subquery in a biological network. The maturity of RDBMSs motivated academia and industry to invest efforts in leveraging RDBMSs for graph processing, where efficiency is proven for vital graph queries. However, none of these efforts process graphs natively inside the RDBMS, which is particularly challenging due to the impedance mismatch between the relational and the graph models. In this paper, we propose to manage graphs as first-class citizens inside the relational engine. We realize our approach inside VoltDB [6], an opensource in-memory relational database, and name this realization GRFusion. The SQL and query engine of GRFusion are empowered to declaratively define graphs and execute cross-data-model query plans acting on graphs and relations, resulting in up to four orders-of-magnitude in query-time speedup w.r.t. state-of-the-art approaches.",20,2114796246,5,"finding related, biological network, data give, give rise, interesting graph-relational","145644753, 26435742, 1709661, 1719119",,9ec2f0d95acc8606323e39054dfab18fe1ca301c,"46255707, 144422954, 2054289955, 2334971, 2304958793",Extending In-Memory Relational Database Engines with Native Graph Support,International Conference on Extending Database Technology,74f47cf8-2839-4a56-959a-524dd0ed9e3e,conference,,2018
,35,144668991,3,,,,45063cf2e0116e700da5ca2863c8bb82ad4d64c2,"2053475163, 51417783, 2118120527, 2973714, 1768034",Conceptual and Database Modelling of Graph Databases,International Database Engineering and Applications Symposium,640b2c9a-6fb2-4333-8780-d31aa3c411cf,conference,,2016
"Interatomic potentials (IAPs), which describe the potential energy surface of atoms, are a fundamental input for atomistic simulations. However, existing IAPs are either fitted to narrow chemistries or too inaccurate for general applications. Here we report a universal IAP for materials based on graph neural networks with three-body interactions (M3GNet). The M3GNet IAP was trained on the massive database of structural relaxations performed by the Materials Project over the past ten years and has broad applications in structural relaxation, dynamic simulations and property prediction of materials across diverse chemical spaces. About 1.8 million materials from a screening of 31 million hypothetical crystal structures were identified to be potentially stable against existing Materials Project crystals based on M3GNet energies. Of the top 2,000 materials with the lowest energies above the convex hull, 1,578 were verified to be stable using density functional theory calculations. These results demonstrate a machine learning-accelerated pathway to the discovery of synthesizable materials with exceptional properties. A machine learning interatomic potential model is designed and trained on diverse crystal data comprising 89 elements, enabling materials discovery across a vast chemical space without retraining.",492,143915066,33,"energy surface, fundamental input, materials, Materials Project, atomistic simulations",2381325,718 - 728,450bb2530e4fb48e828161d3e7741c5b4081c9a2,"47149500, 2218569240, 3090789, 145843448",A universal graph deep learning interatomic potential for the periodic table,Nature Computational Science,4cbc2987-6254-4668-b85b-aeabd7ff62ef,journal,2,2022
,82,144300761,6,,"3239606, 2735649, 39966779",,1f326e8ff72a55895bf7155cdb5c69414837d26a,"46398863, 24812041, 2145413970",Time-varying social networks in a graph database: a Neo4j use case,International Workshop on Graph Data Management Experiences and Systems,c25754e3-36a9-4adb-a390-58907c897425,conference,,2013
,23,1792856,0,,"7617146, 1774041, 1686294, 3090789, 29552860",,67cfefedc118573521d46a7cf4b411d98d438fcb,"2171106811, 153314895, 3410738, 1719119, 2182246691",Massive scale cyber traffic analysis: a driver for graph database research,International Workshop on Graph Data Management Experiences and Systems,c25754e3-36a9-4adb-a390-58907c897425,conference,,2013
